{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","App","state","string","searchField","bind","fetch","then","response","json","users","setState","e","this","target","value","filteredMonsters","filter","toLowerCase","includes","console","log","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"6VAEaA,G,YAAO,SAACC,GAAD,OACpB,yBAAKC,UAAU,kBACf,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,4BAAKL,EAAMI,QAAQE,MACnB,2BAAIN,EAAMI,QAAQG,UCHLC,EAAW,SAACR,GAAD,OACxB,yBAAKC,UAAU,aAAcD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACvD,kBAAC,EAAD,CAAMO,IAAKP,EAAQC,GAAID,QAASA,SCDjBQ,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAcC,EAAjB,EAAiBA,aAAjB,OAC3B,2BAAOb,UAAU,SAASc,KAAK,SAC/BF,YAAcA,EACdG,SAAYF,MCgCGG,G,wDAlCf,aAAgB,IAAD,8BACf,gBACKC,MACL,CACCC,OAAQ,8BACRV,SAAW,GACXW,YAAY,IAEb,EAAKN,aAAe,EAAKA,aAAaO,KAAlB,gBARL,E,gEAUO,IAAD,OACnBC,MAAM,8CACLC,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UAC3BF,MAAK,SAAAG,GAAK,OAAK,EAAKC,SAAS,CAAClB,SAASiB,S,mCAG7BE,GAAIC,KAAKF,SAAS,CAACP,YAAYQ,EAAEE,OAAOC,U,+BAC1C,IAAD,SACuBF,KAAKX,MAA9BT,EADE,EACFA,SAASW,EADP,EACOA,YACXY,EAAmBvB,EAASwB,QAAO,SAAA7B,GAAO,OAAIA,EAAQE,KAAK4B,cAAcC,SAASf,EAAYc,kBAEpG,OADAE,QAAQC,IAAIL,GAEZ,yBAAK/B,UAAU,OACf,kBAAC,EAAD,CACAY,YAAc,kBACdC,aAAgBe,KAAKf,eAErB,kBAAC,EAAD,CAAUL,SAAUuB,IACpB,2CAAiBH,KAAKX,MAAMC,OAA5B,MACA,4BAAQmB,QAAS,kBAAM,EAAKX,SAAS,CAACR,OAAO,sBAA7C,oB,GA9BkBoB,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACE,gDACC,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.dbf4a195.chunk.js","sourcesContent":["import  React  from 'react';\r\nimport './card.style.css';\r\nexport const Card = (props) => (\r\n<div className=\"card-container\">\r\n<img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>  \r\n<h2>{props.monster.name}</h2>\r\n<p>{props.monster.email}</p>\r\n</div>\r\n)","import React from 'react';\r\nimport './card-lidt.style.css';\r\nimport { Card } from '../card/card.component';\r\nexport const CardList = (props) => (\r\n<div className=\"card-list\" >{props.monsters.map(monster => \r\n<Card key={monster.id} monster={monster} /> )}</div>\r\n);","import React from 'react';\r\n\r\nimport './search-box.style.css';\r\n\r\n export  const SearchBox = ({ placeholder , handleChange }) => (\r\n<input className=\"search\" type='search'\r\nplaceholder= {placeholder} \r\nonChange = {handleChange}\r\n /*onChange={ e => { this.setState({searchField :e.target.value} , ()=> console.log(this.state)  )}}*/\r\n/>  \r\n)\r\n","import React  from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport './App.css';\nclass App extends React.Component {\nconstructor () {\nsuper();\nthis.state = \n{\n string: 'Hello make fun to the world',\n monsters : [],\n searchField:''\n} ; \nthis.handleChange = this.handleChange.bind(this);\n}\ncomponentDidMount () {\n  fetch('https://jsonplaceholder.typicode.com/users')\n  .then( response => response.json())\n  .then(users  => this.setState({monsters:users}) );\n  }\n\nhandleChange(e) {this.setState({searchField:e.target.value})};\nrender () {\nconst { monsters,searchField } = this.state; \nconst filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\nconsole.log(filteredMonsters);\nreturn (\n<div className=\"App\">\n<SearchBox\nplaceholder = 'search monsters' \nhandleChange = {this.handleChange}\n/>\n<CardList monsters={filteredMonsters}/>\n<p> and save to {this.state.string}. </p>\n<button onClick={() => this.setState({string:'go to ja mai ka'})} >Change text</button>\n</div>\n);\n}; \n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n <React.StrictMode>\n   <h1>Monster Roleajax</h1>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}